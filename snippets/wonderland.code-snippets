{
	"component-parameter-enum": {
		"body": "${1:name}: {type: WL.Type.Enum, values: [${2:'A','B'}], default: ${3:'A'}}$0",
		"description": "adds a component parameter of type enum",
		"scope": "javascript",
		"prefix": "wl:param:enum"
	},
	"component-parameter-float": {
		"body": "${1:name}: {type: WL.Type.Float, default: ${2:1.0}}$0",
		"description": "adds a component parameter of type float",
		"scope": "javascript",
		"prefix": "wl:param:float"
	},
	"component-parameter-object": {
		"body": "${1:name}: {type: WL.Type.Object}$0",
		"description": "adds a component parameter of type object",
		"scope": "javascript",
		"prefix": "wl:param:object"
	},
	"component-parameter-bool": {
		"body": "${1:name}: {type: WL.Type.Bool, default: ${2:false}}$0",
		"description": "adds a component parameter of type boolean",
		"scope": "javascript",
		"prefix": "wl:param:bool"
	},
	"component-parameter-mesh": {
		"body": "${1:name}: {type: WL.Type.Material}$0",
		"description": "adds a component parameter of type material",
		"scope": "javascript",
		"prefix": "wl:param:material"
	},
	"component-parameter-material": {
		"body": "${1:name}: {type: WL.Type.Mesh}$0",
		"description": "adds a component parameter of type mesh",
		"scope": "javascript",
		"prefix": "wl:param:mesh"
	},
	"component-parameter-texture": {
		"body": "${1:name}: {type: WL.Type.Texture}$0",
		"description": "adds a component parameter of type texture",
		"scope": "javascript",
		"prefix": "wl:param:texture"
	},
	"component-parameter-animation": {
		"body": "${1:name}: {type: WL.Type.Animation}$0",
		"description": "adds a component parameter of type animation",
		"scope": "javascript",
		"prefix": "wl:param:animation"
	},
	"component-parameter-Skin": {
		"body": "${1:name}: {type: WL.Type.Skin}$0",
		"description": "adds a component parameter of type skin",
		"scope": "javascript",
		"prefix": "wl:param:skin"
	},
	"component-parameter-int": {
		"body": "${1:name}: {type: WL.Type.Int, default: $2}$0",
		"description": "adds a component parameter of type int",
		"scope": "javascript",
		"prefix": "wl:param:int"
	},
	"component-parameter-string": {
		"body": "${1:name}: {type: WL.Type.String, default: '$2'}$0",
		"description": "adds a component parameter of type string",
		"scope": "javascript",
		"prefix": "wl:param:string"
	},
	"object-get-component": {
		"body": "let ${1:comp} = ${2:this.object}.getComponent('${3:collision}');\n$0",
		"description": "gets a component from an object, stored into local variable",
		"scope": "javascript",
		"prefix": "wl:get-component"
	},
	"object-get-member-component": {
		"body": "this.${1:comp} = ${2:this.object}.getComponent('${3:collision}');\n$0",
		"description": "gets a component from an object, stored as member",
		"scope": "javascript",
		"prefix": "wl:get-member-component"
	},
	"object-add-component": {
		"body": "let ${1:comp} = ${2:this.object}.addComponent('${3:collision}', {$0}});\n",
		"description": "adds a component to an object, stored into local variable",
		"scope": "javascript",
		"prefix": "wl:add-component"
	},
	"object-add-member-component": {
		"body": "this.${1:comp} = ${2:this.object}.addComponent('${3|collision,mesh,text,physx,view,light,animation,input,${4:cursor-target}|}', {$0});\n",
		"description": "adds a component to an object, stored as member",
		"scope": "javascript",
		"prefix": "wl:add-member-component"
	},
	"Wonderland Script Reference":{
		"body": "/// <reference path=\"../../deploy/wonderland.js\" />",
		"description": "add a reference to the deploy folder with the wonderland script",
		"scope": "javascript",
		"prefix":"wl:script-reference"
	},
	"Wonderland new component":{
		"description": "New and empty component",
		"scope": "javascript",
		"prefix": "wl:component",
		"body": [
			"/// <reference path=\"../deploy/wonderland.js\" />",
			"WL.registerComponent('$TM_FILENAME_BASE', {",
			"    $0",
			"}, {",
			"    init: function() {",
			"        ",
			"    },",
			"    start: function() {",
			"    ",
			"    },",
			"    update: function(dt) {",
			"        ",
			"    },",
			"});"
		]

	}
}
